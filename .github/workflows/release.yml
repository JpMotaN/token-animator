name: Release (GitHub + Foundry)

on:
  push:
    tags:
      - "v*.*.*"            # ex.: v0.1.4
  workflow_dispatch: {}

permissions:
  contents: write           # criar release e enviar assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip curl

      - name: Resolve tag/version
        id: meta
        shell: bash
        run: |
          RAW_TAG="${GITHUB_REF#refs/tags/}"   # v0.1.4
          if [ -z "$RAW_TAG" ]; then
            RAW_TAG="$(git describe --tags --abbrev=0)"
          fi
          if [[ ! "$RAW_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag: '$RAW_TAG' (expected vX.Y.Z)" >&2
            exit 2
          fi
          VERSION="${RAW_TAG#v}"               # 0.1.4
          echo "tag=$RAW_TAG"       >> $GITHUB_OUTPUT
          echo "version=$VERSION"   >> $GITHUB_OUTPUT
          echo "Using TAG=$RAW_TAG / VERSION=$VERSION"

      - name: Validate base module.json
        run: |
          test -f module.json || (echo "module.json not found at repo root" && exit 1)
          jq -e '.id and .title and .compatibility.minimum and .compatibility.verified' module.json >/dev/null \
            || (echo "Missing required fields in module.json (id/title/compatibility.minimum/compatibility.verified)" && exit 1)

      # Patch para apontar MANIFEST e DOWNLOAD aos assets da RELEASE desta tag
      - name: Patch module.json (version/manifest/download)
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          TAG="${{ steps.meta.outputs.tag }}"
          VERSION="${{ steps.meta.outputs.version }}"

          MANIFEST_URL="https://github.com/${REPO}/releases/download/${TAG}/module.json"
          DOWNLOAD_URL="https://github.com/${REPO}/releases/download/${TAG}/token-animator.zip"

          tmp=$(mktemp)
          jq --arg v "$VERSION" \
             --arg manifest "$MANIFEST_URL" \
             --arg download "$DOWNLOAD_URL" \
             '.version=$v | .manifest=$manifest | .download=$download' \
             module.json > "$tmp" && mv "$tmp" module.json

          echo "module.json after patch:"
          cat module.json

      - name: Build zip
        run: |
          mkdir -p dist
          zip -r "dist/token-animator-${{ steps.meta.outputs.version }}.zip" \
            module.json \
            scripts \
            styles \
            --exclude '*.git*' \
            --exclude 'dist/*' \
            --exclude '.github/*'
          cp "dist/token-animator-${{ steps.meta.outputs.version }}.zip" token-animator.zip

      - name: Checksums
        run: |
          sha256sum token-animator.zip > token-animator.zip.sha256
          sha256sum module.json > module.json.sha256
          cat token-animator.zip.sha256
          cat module.json.sha256

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.tag }}
          draft: false
          prerelease: ${{ contains(steps.meta.outputs.tag, 'beta') || contains(steps.meta.outputs.tag, 'alpha') }}
          files: |
            token-animator.zip
            token-animator.zip.sha256
            module.json
            module.json.sha256

      # Aguarda o asset "module.json" do release ficar acessível
      - name: Wait for manifest asset availability
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          TAG="${{ steps.meta.outputs.tag }}"
          URL="https://github.com/${REPO}/releases/download/${TAG}/module.json"
          echo "Waiting for $URL"
          for i in {1..20}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            echo "Try $i -> HTTP $CODE"
            [ "$CODE" = "200" ] && exit 0
            sleep 3
          done
          echo "Manifest asset not reachable in time"
          exit 1

      # Dry-run na API do Foundry com 'compatibility' (resolve o erro que você viu)
      - name: Foundry API (dry-run)
        env:
          FOUNDRY_RELEASE_TOKEN: ${{ secrets.FOUNDRY_RELEASE_TOKEN }}
        shell: bash
        run: |
          PKG_ID=$(jq -r '.id' module.json)
          VERSION=$(jq -r '.version' module.json)
          MANIFEST=$(jq -r '.manifest' module.json)
          MIN=$(jq -r '.compatibility.minimum' module.json)
          VER=$(jq -r '.compatibility.verified' module.json)
          NOTES="https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.tag }}"

          payload=$(jq -n \
            --arg id "$PKG_ID" \
            --arg v "$VERSION" \
            --arg manifest "$MANIFEST" \
            --arg notes "$NOTES" \
            --arg min "$MIN" \
            --arg ver "$VER" \
            '{id:$id, "dry-run": true, release:{version:$v, manifest:$manifest, notes:$notes, compatibility:{minimum:$min, verified:$ver}}}')

          echo "$payload" > dryrun_body.json

          curl -sS -X POST "https://foundryvtt.com/_api/packages/release_version/" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${FOUNDRY_RELEASE_TOKEN}" \
            -d @dryrun_body.json | tee dryrun_response.json

          jq -e '.status == "success"' dryrun_response.json > /dev/null

      # Publica na Foundry (com compatibility)
      - name: Publish to Foundry
        env:
          FOUNDRY_RELEASE_TOKEN: ${{ secrets.FOUNDRY_RELEASE_TOKEN }}
        shell: bash
        run: |
          PKG_ID=$(jq -r '.id' module.json)
          VERSION=$(jq -r '.version' module.json)
          MANIFEST=$(jq -r '.manifest' module.json)
          MIN=$(jq -r '.compatibility.minimum' module.json)
          VER=$(jq -r '.compatibility.verified' module.json)
          NOTES="https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.tag }}"

          payload=$(jq -n \
            --arg id "$PKG_ID" \
            --arg v "$VERSION" \
            --arg manifest "$MANIFEST" \
            --arg notes "$NOTES" \
            --arg min "$MIN" \
            --arg ver "$VER" \
            '{id:$id, release:{version:$v, manifest:$manifest, notes:$notes, compatibility:{minimum:$min, verified:$ver}}}')

          echo "$payload" > publish_body.json

          curl -sS -X POST "https://foundryvtt.com/_api/packages/release_version/" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${FOUNDRY_RELEASE_TOKEN}" \
            -d @publish_body.json | tee publish_response.json

          jq -e '.status == "success"' publish_response.json > /dev/null
